#include<bits/stdc++.h>
using namespace std;
int left_index(int v2[],int lo,int hi,int key)
{
    int mid;
    while(hi-lo>1)
    {
        mid=lo+(hi-lo)/2;
        if(v2[mid]>=key)
            hi=mid;
        else
            lo=mid;
    }
    return hi;
}
int right_index(int v2[],int lo,int hi,int key)
{
    int mid;
    while(hi-lo>1)
    {
        mid=lo+(hi-lo)/2;
        if(v2[mid]<=key)
            lo=mid;
        else
            hi=mid;
    }
    return lo;
}
int binarysearch(int v2[],int key,int size_v2)
{
    int n=size_v2;
    int lo=0,hi=n,mid;
    int leftmost=left_index(v2,lo-1,hi-1,key);
    int rightmost=right_index(v2,lo,hi,key);
    if(v2[leftmost]==key && v2[rightmost]==key)
    return (rightmost-leftmost+1);
    return 0;

}
int main()
{   ios_base::sync_with_stdio(false);
cin.tie(NULL);
cout.tie(NULL);
    int N;
    cin>>N;
    int a[N+2];
   int v1[1000007],v2[1000006];
    int temp;
    for(int i=0;i<N;i++)
        {cin>>a[i];}
  int p=-1;
    for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            for(int k=0;k<N;k++)
            {
                v1[++p]=a[i]*a[j]+a[k];
            }
        }
    }
    int size_v1=p+1;
    p=-1;
     for(int i=0;i<N;i++)
    {
        for(int j=0;j<N;j++)
        {
            for(int k=0;k<N;k++)
            {
                if(a[k]!=0)
                    v2[++p]=(a[i]+a[j])*a[k];
            }
        }
    }
    int size_v2=p+1;
    sort(v1,v1+size_v1);
    sort(v2,v2+size_v2);
    int count1=0;
    for(int i=0;i<size_v1;i++)
    {
        count1+=binarysearch(v2,v1[i],size_v2);
    }
    cout<<count1;
}
