#include<bits/stdc++.h>
using namespace std;
int right_index(int v2[],int lo,int hi,int key)
{
    int mid;
    while(hi-lo>1)
    {
        mid=lo+(hi-lo)/2;
        if(v2[mid]<=key)
            lo=mid;
        else
            hi=mid;
    }
    return lo;
}
int left_index(int v2[],int lo,int hi,int key)
{
    int mid;
    while(hi-lo>1)
    {   mid=lo+(hi-lo)/2;
        if(v2[mid]>=key)
            hi=mid;
        else
            lo=mid;
    }
    return hi;
}
int binarysearch(int v2[],int key,int n)
{  int lo=0,hi=n;
    int leftmost=left_index(v2,lo-1,hi-1,key);
    int rightmost=right_index(v2,lo,hi,key);
    if(v2[leftmost]==key && v2[rightmost]==key)
        return (rightmost-leftmost+1);
    return 0;
}
int main()
{
    int n;
    scanf("%d",&n);
    int a[n],b[n],c[n],d[n],v1[n*n],v2[n*n];
    for(int i=0;i<n;i++)
    {
        scanf("%d%d%d%d",&a[i],&b[i],&c[i],&d[i]);
    }
    sort(a,a+n);
    sort(b,b+n);
    sort(c,c+n);
    sort(d,d+n);
    int p=-1;
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            v1[++p]=a[i]+b[j];
        }
    }
    int size_v1=p+1;
    p=-1;
     for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            v2[++p]=-(c[i]+d[j]);
        }
    }
    int size_v2=p+1;
   // sort(v1,v1+size_v1);
    sort(v2,v2+size_v2);
    int count1=0;
    for(int i=0;i<size_v1;i++)
    {
        count1+=binarysearch(v2,v1[i],size_v2);
    }
     printf("%d",count1);

}
